@page "/blog/edit/{id:int}"
@inject AppDbContext db


<h3>BlogEditPage</h3>

@if(_blog is not null){
<div class="mb-3">
    <label class="form-label">Title</label>
    <input type="text" class="form-control" @bind-value="_blog.BlogTitle">
</div>

<div class="mb-3">
    <label class="form-label">Author</label>
    <input type="text" class="form-control" @bind-value="_blog.BlogAuthor">
</div>

<div class="mb-3">
    <label class="form-label">Content</label>
    <input type="text" class="form-control" @bind-value="_blog.BlogContent">
</div>

<a href="/Blog" class="btn btn-dark">Cancel</a>
<button type="submit" class="btn btn-success" @onclick="Update">Update</button>
}

@code {
    [Parameter]
    public int id { get; set; }

    private BlogModel? _blog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            _blog = await db.Blogs
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.BlogId == id);
            StateHasChanged();
        }
    }

    private async Task Update()
    {
        var item = await db.Blogs
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.BlogId == _blog.BlogId);
        if (item is null)
        {
            await jsRuntime.InvokeVoidAsync("alert", "No data found");
            nav.NavigateTo("/blog");
        }

        item.BlogTitle = _blog.BlogTitle;
        item.BlogAuthor = _blog.BlogAuthor;
        item.BlogContent = _blog.BlogContent;

        db.Entry(item).State = EntityState.Modified;
        var result = await db.SaveChangesAsync();

        await jsRuntime.InvokeVoidAsync("alert", result > 0 ? "Updating Successful." : "Updating failed.");
        nav.NavigateTo("/blog");
    }
}
